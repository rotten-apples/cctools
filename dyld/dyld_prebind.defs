#include <mach/std_types.defs>

/* mig definition for protocol between
   dyld and fix_prebinding.  The message is one-way ("simpleroutine"),
*/

subsystem _dyld_prebind 500; /* choose random starting place for messages. */

/* Specify our demux (message dispatcher/handler) that we 
   want to have control when each message comes in.  This is used
   so the server can distinguish between messages from the 
   client and from the timeout port.  */
serverdemux prebind_private;

type data_t = ^array[] of char;
type struct_timeval = struct[2] of int;
import "dyld_prebind_defs.h";

simpleroutine warnBadlyPrebound(
    server: mach_port_t;
    /* When was the program launched/dyld noticed a problem?
       Used to decide when changes may have occurred between the time
       of the problem, and the time fix_prebinding starts to work on
       the file */
    in problemTime: struct_timeval; 
    /* device and inode number for root directory.  Used to identify if 
       program was running in chrooted environment. */
    in deviceNumber: int;
    in inodeNumber: int;
    /* Name of the program that's badly prebound. */
    in badlyPreboundFile: data_t; /* null terminated string */
    /* Specify timeout value for waiting for message to be successfully sent */
    SendTime to: natural_t);
