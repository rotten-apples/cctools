/*
 * Copyright (c) 1999 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights
 * Reserved.  This file contains Original Code and/or Modifications of
 * Original Code as defined in and that are subject to the Apple Public
 * Source License Version 1.1 (the "License").  You may not use this file
 * except in compliance with the License.  Please obtain a copy of the
 * License at http://www.apple.com/publicsource and read it before using
 * this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON- INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
subsystem _dyld_debug 100;

#include <mach/std_types.defs>

import <mach-o/dyld_debug.h>;
import "dyld_debug_defs.h";

#ifndef __MACH30__
uimport "dyld_debug_MsgError.h";
error dyld_debug_MsgError;
#endif

#ifdef __MACH30__
type dyld_debug_return_t = MACH_MSG_TYPE_INTEGER_32;
type long = MACH_MSG_TYPE_INTEGER_32;
#else
type dyld_debug_return_t = MSG_TYPE_INTEGER_32;
type long = MSG_TYPE_INTEGER_32;
#endif
type string_t = ^array[] of char;
type module_t = struct[3] of long; 

serverprefix server;
userprefix user;

#ifdef __MACH30__
routine _dyld_debug_defining_module(
    requestport debug_port : mach_port_t;
    waittime rcv_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in name : string_t;
    out module : module_t;
    out retval : dyld_debug_return_t);
#else
function _dyld_debug_defining_module(
    requestport debug_port : port_t;
    waittime rcv_timeout : long;
    sendtime send_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in name : string_t;
    out module : module_t)
	: dyld_debug_return_t;
#endif

#ifdef __MACH30__
routine _dyld_debug_is_module_bound(
    requestport debug_port : mach_port_t;
    waittime rcv_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in module : module_t;
    out bound : boolean_t;
    out retval : dyld_debug_return_t);
#else
function _dyld_debug_is_module_bound(
    requestport debug_port : port_t;
    waittime rcv_timeout : long;
    sendtime send_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in module : module_t;
    out bound : boolean_t)
	: dyld_debug_return_t;
#endif

#ifdef __MACH30__
routine _dyld_debug_bind_module(
    requestport debug_port : mach_port_t;
    waittime rcv_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in module : module_t;
    out retval : dyld_debug_return_t);
#else
function _dyld_debug_bind_module(
    requestport debug_port : port_t;
    waittime rcv_timeout : long;
    sendtime send_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in module : module_t)
	: dyld_debug_return_t;
#endif

#ifdef __MACH30__
routine _dyld_debug_add_event_subscriber(
    requestport debug_port : mach_port_t;
    waittime rcv_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in subscriber : mach_port_make_send_t;
    out retval : dyld_debug_return_t);
#else
procedure _dyld_debug_add_event_subscriber(
    requestport debug_port : port_t;
    waittime rcv_timeout : long;
    sendtime send_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in subscriber : port_t);
#endif

#ifdef __MACH30__
routine _dyld_debug_module_name(
    requestport debug_port : mach_port_t;
    waittime rcv_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in module : module_t;
    out image_name : string_t;
    out module_name : string_t;
    out retval : dyld_debug_return_t);
#else
function _dyld_debug_module_name(
    requestport debug_port : port_t;
    waittime rcv_timeout : long;
    sendtime send_timeout : long;
    in inconsistent_data_ok : boolean_t;
    in module : module_t;
    out image_name : string_t;
    out module_name : string_t)
	: dyld_debug_return_t;
#endif

#ifdef DYLD_PROFILING
#ifdef __MACH30__
routine _dyld_debug_monoutput(
    requestport debug_port : mach_port_t;
    waittime rcv_timeout : long;
    out retval : dyld_debug_return_t);
#else
function _dyld_debug_monoutput(
    requestport debug_port : port_t;
    waittime rcv_timeout : long;
    sendtime send_timeout : long)
	: dyld_debug_return_t;
#endif
#endif /* DYLD_PROFILING */
