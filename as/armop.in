# -----------------------------------------------------------------------------
#   Fundamental ARM instructions
# -----------------------------------------------------------------------------

# Branch instructions
b{l}{<cond>}        t: OP_BRANCH        e: 101  (25)

.define l
l                                   e: 1        (24)
*                                   e: 0        (24)
.enddefine

# Data-processing instructions
and{<cond>}{s}      t: OP_DATA_PROC_3   e: 0000     (21)
eor{<cond>}{s}      t: OP_DATA_PROC_3   e: 0001     (21)
sub{<cond>}{s}      t: OP_DATA_PROC_3   e: 0010     (21)
rsb{<cond>}{s}      t: OP_DATA_PROC_3   e: 0011     (21)
add{<cond>}{s}      t: OP_DATA_PROC_3   e: 0100     (21)
adc{<cond>}{s}      t: OP_DATA_PROC_3   e: 0101     (21)
sbc{<cond>}{s}      t: OP_DATA_PROC_3   e: 0110     (21)
rsc{<cond>}{s}      t: OP_DATA_PROC_3   e: 0111     (21)
tst{<cond>}{p}{s}   t: OP_DATA_PROC_2   e: 1000     (21)
teq{<cond>}{p}{s}   t: OP_DATA_PROC_2   e: 1001     (21)
cmp{<cond>}{p}{s}   t: OP_DATA_PROC_2   e: 1010     (21)
cmn{<cond>}{p}{s}   t: OP_DATA_PROC_2   e: 1011     (21)
orr{<cond>}{s}      t: OP_DATA_PROC_3   e: 1100     (21)
mov{<cond>}{s}      t: OP_DATA_PROC_1   e: 1101     (21)
bic{<cond>}{s}      t: OP_DATA_PROC_3   e: 1110     (21)
mvn{<cond>}{s}      t: OP_DATA_PROC_1   e: 1111     (21)
adr{<cond>}{s}      t: OP_ADR           e: 0000     (21)
ldf{<cond>}{sdep}   t: OP_LDF           e: 110      (25), 1 (20), 1 (8)
stf{<cond>}{sdep}   t: OP_LDF           e: 110      (25), 0 (20), 1 (8)

# Multiply instructions
mul{<cond>}{s}      t: OP_MUL           e: 0000000 (21), 1001 (4)
mla{<cond>}{s}      t: OP_MLA           e: 0000001 (21), 1001 (4)
smlal{<cond>}{s}    t: OP_SMLAL         e: 0000111 (21), 1001 (4)
smull{<cond>}{s}    t: OP_SMLAL         e: 0000110 (21), 1001 (4)
umlal{<cond>}{s}    t: OP_SMLAL         e: 0000101 (21), 1001 (4)
umull{<cond>}{s}    t: OP_SMLAL         e: 0000100 (21), 1001 (4) 

.define sdep
s                                       e: 0 (22), 0 (15)
d                                       e: 0 (22), 1 (15)
e                                       e: 1 (22), 0 (15)
p                                       e: 1 (22), 1 (15)
.enddefine

.define s
s                                       e: 1 (20)
*                                       e: 0 (20)
.enddefine

.define p
p                                       e: 1111 (12)
*                                       e: 0000 (12)
.enddefine

# Miscellaneous arithmetic instructions
clz{<cond>}         t: OP_CLZ       e: 00010110 (20), 1111 (16), 11110001 (4)

# Load and store instructions
ldr{<cond>}{b}{t}   t: OP_LDR           e: 01 (26), 1 (20)
str{<cond>}{b}{t}   t: OP_LDR           e: 01 (26), 0 (20)

.define b
b                                       e: 1 (22)
*                                       e: 0 (22)
.enddefine

.define t
t                                       e: 0 (24), 1 (21)
*                                       e: 0 (0)
.enddefine

# Load and store multiple instructions
ldm{<cond>}{lm_am}  t: OP_LDM           e: 100 (25), 1 (20)
stm{<cond>}{sm_am}  t: OP_LDM           e: 100 (25), 0 (20)

.define lm_am
da                                      e: 0 (24), 0 (23)
ia                                      e: 0 (24), 1 (23)
db                                      e: 1 (24), 0 (23)
ib                                      e: 1 (24), 1 (23)
fa                                      e: 0 (24), 0 (23)
fd                                      e: 0 (24), 1 (23)
ea                                      e: 1 (24), 0 (23)
ed                                      e: 1 (24), 1 (23)
.enddefine

.define sm_am
da                                      e: 0 (24), 0 (23)
ia                                      e: 0 (24), 1 (23)
db                                      e: 1 (24), 0 (23)
ib                                      e: 1 (24), 1 (23)
ed                                      e: 0 (24), 0 (23)
ea                                      e: 0 (24), 1 (23)
fd                                      e: 1 (24), 0 (23)
fa                                      e: 1 (24), 1 (23)
.enddefine

# Exception-generating instructions
swi{<cond>}         t: OP_SWI           e: 1111 (24)
bkpt                t: OP_BKPT          e: 1110 (28), 00010010 (20), 0111 (4)

# Mnemonic instructions
nop{<cond>}         t: OP_NOP           e: 00011010 (20), 0000 (12) 

# Condition codes
.define <cond>
eq                                      e: 0000 (28)
ne                                      e: 0001 (28)
cs                                      e: 0010 (28)
hs                                      e: 0010 (28)
cc                                      e: 0011 (28)
lo                                      e: 0011 (28)
ul                                      e: 0011 (28)
mi                                      e: 0100 (28)
pl                                      e: 0101 (28)
vs                                      e: 0110 (28)
vc                                      e: 0111 (28)
hi                                      e: 1000 (28)
ls                                      e: 1001 (28)
ge                                      e: 1010 (28)
lt                                      e: 1011 (28)
gt                                      e: 1100 (28)
le                                      e: 1101 (28)
al                                      e: 1110 (28)
nv                                      e: 1111 (28)
*                                       e: 1110 (28)
.enddefine

# -----------------------------------------------------------------------------
#   ARMv2 instructions 
# -----------------------------------------------------------------------------

ldc{<cond>}{s_l}                        t: OP_LDC   e: 110 (25), 1 (20)
stc{<cond>}{s_l}                        t: OP_LDC   e: 110 (25), 0 (20)

mcr{<cond>}                             t: OP_MCR   e: 1110 (24), 0 (20), 1 (4)
mrc{<cond>}                             t: OP_MCR   e: 1110 (24), 1 (20), 1 (4)

.define s_l
l                                       e: 1 (22)
*                                       e: 0 (22)
.enddefine

# -----------------------------------------------------------------------------
#   ARMv3 instructions 
# -----------------------------------------------------------------------------

mrs{<cond>} t: OP_MRS   e: 00010 (23), 00 (20), 1111 (16), 000000000000 (0)
msr{<cond>} t: OP_MSR   e: 00 (26), 10 (23), 10 (20), 1111 (12)

swp{<cond>} t: OP_SWP   e: 00010000 (20), 0000 (8), 1001 (4)

# -----------------------------------------------------------------------------
#   ARMv4t instructions 
# -----------------------------------------------------------------------------

bx{<cond>}          t: OP_BX    e: 00010010 (20), 111111111111 (8), 0001 (4)

ldr{<cond>}{h|sh|sb}    t: OP_LDRH      e: 000 (25), 1 (20)
str{<cond>}{h|sh|sb}    t: OP_LDRH      e: 000 (25), 0 (20)

.define h|sh|sb
h                                       e: 1011 (4)
sh                                      e: 1111 (4)
sb                                      e: 1101 (4)
.enddefine

# -----------------------------------------------------------------------------
#   ARMv5 instructions 
# -----------------------------------------------------------------------------

blx{<cond>}             t: OP_BLX       e: 0 (0)
bxj{<cond>}             t: OP_BXJ       e: 0 (0)

smla{<x>}{<y>}{<cond>}  t: OP_SMLA_XY   e: 00010000 (20), 1 (7), 0 (4)
smlaw{<y>}{<cond>}      t: OP_SMLA_XY   e: 00010010 (20), 1 (7), 0 (5), 0 (4)

smlal{<x>}{<y>}{<cond>} t: OP_SMLAL_XY  e: 00010100 (20), 1 (7), 0 (4)

smul{<x>}{<y>}{<cond>}  t: OP_SMUL_XY   e: 00010110 (20), 1 (7), 0 (4)
smulw{<y>}{<cond>}      t: OP_SMUL_XY   e: 00010010 (20), 1 (7), 1 (5), 0 (4)

.define <x>
b                                       e: 0 (5)
t                                       e: 1 (5)
.enddefine

.define <y>
b                                       e: 0 (6)
t                                       e: 1 (6)
.enddefine

qadd{<cond>}            t: OP_QADD      e: 00010000 (20), 0101 (4)
qdadd{<cond>}           t: OP_QADD      e: 00010100 (20), 0101 (4)
qsub{<cond>}            t: OP_QADD      e: 00010010 (20), 0101 (4)
qdsub{<cond>}           t: OP_QADD      e: 00010110 (20), 0101 (4)

# -----------------------------------------------------------------------------
#   ARMv6 instructions 
# -----------------------------------------------------------------------------

cps{<effect>}       t: OP_CPS_EFFECT    e: 1111 (28), 00010000 (20)
cps                 t: OP_CPS           e: 1111 (28), 00010000 (20)

.define <effect>
ie                                      e: 10 (18)
id                                      e: 11 (18)
.enddefine

ldrex{<cond>}       t: OP_LDREX         e: 00011001 (20), 111110011111 (0)

mcrr2               t: OP_MCRR2         e: 1111 (28), 11000100 (20)
mrrc2               t: OP_MCRR2         e: 1111 (28), 11000101 (20)

pkhbt{<cond>}       t: OP_PKHBT         e: 01101000 (20), 001 (4)
pkhtb{<cond>}       t: OP_PKHTB         e: 01101000 (20), 101 (4)

qadd16{<cond>}      t: OP_QADD16        e: 01100010 (20), 1111 (8), 0001 (4)
qadd8{<cond>}       t: OP_QADD16        e: 01100010 (20), 1111 (8), 1001 (4)
qaddsubx{<cond>}    t: OP_QADD16        e: 01100010 (20), 1111 (8), 0011 (4)
qsub16{<cond>}      t: OP_QADD16        e: 01100010 (20), 1111 (8), 0111 (4)
qsub8{<cond>}       t: OP_QADD16        e: 01100010 (20), 1111 (8), 1111 (4)
qsubaddx{<cond>}    t: OP_QADD16        e: 01100010 (20), 1111 (8), 0101 (4)
sadd16{<cond>}      t: OP_QADD16        e: 01100001 (20), 1111 (8), 0001 (4)
sadd8{<cond>}       t: OP_QADD16        e: 01100001 (20), 1111 (8), 1001 (4)
saddsubx{<cond>}    t: OP_QADD16        e: 01100001 (20), 1111 (8), 0011 (4)
shadd16{<cond>}     t: OP_QADD16        e: 01100011 (20), 1111 (8), 0001 (4)
shadd8{<cond>}      t: OP_QADD16        e: 01100011 (20), 1111 (8), 1001 (4)
shaddsubx{<cond>}   t: OP_QADD16        e: 01100011 (20), 1111 (8), 0011 (4)
shsub16{<cond>}     t: OP_QADD16        e: 01100011 (20), 1111 (8), 0111 (4)
shsub8{<cond>}      t: OP_QADD16        e: 01100011 (20), 1111 (8), 1111 (4)
shsubaddx{<cond>}   t: OP_QADD16        e: 01100011 (20), 1111 (8), 0101 (4)
ssub16{<cond>}      t: OP_QADD16        e: 01100001 (20), 1111 (8), 0111 (4)
ssub8{<cond>}       t: OP_QADD16        e: 01100001 (20), 1111 (8), 1111 (4)
ssubaddx{<cond>}    t: OP_QADD16        e: 01100001 (20), 1111 (8), 0101 (4)
uadd16{<cond>}      t: OP_QADD16        e: 01100101 (20), 1111 (8), 0001 (4)
uadd8{<cond>}       t: OP_QADD16        e: 01100101 (20), 1111 (8), 1001 (4)
uaddsubx{<cond>}    t: OP_QADD16        e: 01100101 (20), 1111 (8), 0011 (4)
uhadd16{<cond>}     t: OP_QADD16        e: 01100111 (20), 1111 (8), 0001 (4)
uhadd8{<cond>}      t: OP_QADD16        e: 01100111 (20), 1111 (8), 1001 (4)
uhaddsubx{<cond>}   t: OP_QADD16        e: 01100111 (20), 1111 (8), 0011 (4)
uhsub16{<cond>}     t: OP_QADD16        e: 01100111 (20), 1111 (8), 0111 (4)
uhsub8{<cond>}      t: OP_QADD16        e: 01100111 (20), 1111 (8), 1111 (4)
uhsubaddx{<cond>}   t: OP_QADD16        e: 01100111 (20), 1111 (8), 0101 (4)
uqadd16{<cond>}     t: OP_QADD16        e: 01100110 (20), 1111 (8), 0001 (4)
uqadd8{<cond>}      t: OP_QADD16        e: 01100110 (20), 1111 (8), 1001 (4)
uqaddsubx{<cond>}   t: OP_QADD16        e: 01100110 (20), 1111 (8), 0011 (4)
uqsub16{<cond>}     t: OP_QADD16        e: 01100110 (20), 1111 (8), 0111 (4)
uqsub8{<cond>}      t: OP_QADD16        e: 01100110 (20), 1111 (8), 1111 (4)
uqsubaddx{<cond>}   t: OP_QADD16        e: 01100110 (20), 1111 (8), 0101 (4)
usub16{<cond>}      t: OP_QADD16        e: 01100101 (20), 1111 (8), 0111 (4)
usub8{<cond>}       t: OP_QADD16        e: 01100101 (20), 1111 (8), 1111 (4)
usubaddx{<cond>}    t: OP_QADD16        e: 01100101 (20), 1111 (8), 0101 (4)

rev{<cond>}         t: OP_REV           e: 011010111111 (16), 11110011 (4)
rev16{<cond>}       t: OP_REV           e: 011010111111 (16), 11111011 (4)
revsh{<cond>}       t: OP_REV           e: 011011111111 (16), 11111011 (4)

rfe{rfe_am}         t: OP_RFE       e: 1111100 (25), 0 (22), 1 (20), 1010 (8)

.define rfe_am
da                                      e: 0 (24), 0 (23)
ia                                      e: 0 (24), 1 (23)
db                                      e: 1 (24), 0 (23)
ib                                      e: 1 (24), 1 (23)
ea                                      e: 0 (24), 0 (23)
fd                                      e: 0 (24), 1 (23)
ed                                      e: 1 (24), 0 (23)
fa                                      e: 1 (24), 1 (23)
.enddefine

sxtah{<cond>}       t: OP_SXTAH         e: 01101011 (20), 00 (8), 0111 (4)
sxtab16{<cond>}     t: OP_SXTAH         e: 01101000 (20), 00 (8), 0111 (4)
sxtab{<cond>}       t: OP_SXTAH         e: 01101010 (20), 00 (8), 0111 (4)
uxtah{<cond>}       t: OP_SXTAH         e: 01101111 (20), 00 (8), 0111 (4)
uxtab16{<cond>}     t: OP_SXTAH         e: 01101100 (20), 00 (8), 0111 (4)
uxtab{<cond>}       t: OP_SXTAH         e: 01101110 (20), 00 (8), 0111 (4)

sel{<cond>}         t: OP_SEL           e: 01101000 (20), 1111 (8), 1011 (4)

setend              t: OP_SETEND        e: 1111000100000001 (16), 0000 (4)

smlad{x}{<cond>}    t: OP_SMLAD         e: 01110000 (20), 00 (6), 1 (4)
smlsd{x}{<cond>}    t: OP_SMLAD         e: 01110000 (20), 01 (6), 1 (4)
smmla{r}{<cond>}    t: OP_SMLAD         e: 01110101 (20), 00 (6), 1 (4)
smmls{r}{<cond>}    t: OP_SMLAD         e: 01110101 (20), 11 (6), 1 (4)

smlald{x}{<cond>}   t: OP_SMLALD        e: 01110100 (20), 00 (6), 1 (4)
smlsld{x}{<cond>}   t: OP_SMLALD        e: 01110100 (20), 01 (6), 1 (4)
umaal{<cond>}       t: OP_SMLALD        e: 00000100 (20), 1001 (4)

smmul{r}{<cond>}    t: OP_SMMUL     e: 01110101 (20), 1111 (12), 00 (6), 1 (4)
smuad{x}{<cond>}    t: OP_SMMUL     e: 01110000 (20), 1111 (12), 00 (6), 1 (4)
smusd{x}{<cond>}    t: OP_SMMUL     e: 01110000 (20), 1111 (12), 01 (6), 1 (4)

.define r
r                                       e: 1 (5)
*                                       e: 0 (5)
.enddefine

.define x
x                                       e: 1 (5)
*                                       e: 0 (5)
.enddefine

srs{rfe_am}         t: OP_SRS   e: 1111100 (25), 1 (22), 01101 (16), 0101 (8)

ssat{<cond>}        t: OP_SSAT          e: 0110101 (21), 01 (4)
usat{<cond>}        t: OP_USAT          e: 0110111 (21), 01 (4)
ssat16{<cond>}      t: OP_SSAT16        e: 01101010 (20), 1111 (8), 0011 (4)
usat16{<cond>}      t: OP_USAT16        e: 01101110 (20), 1111 (8), 0011 (4)

strex{<cond>}       t: OP_STREX     e: 0001100 (21), 0 (20), 1111 (8), 1001 (4)
swp{<cond>}         t: OP_SWP       e: 0000001 (24), 1001 (4)

sxth{<cond>}        t: OP_SXTH      e: 01101011 (20), 1111 (16), 000111 (4)
sxtb16{<cond>}      t: OP_SXTH      e: 01101000 (20), 1111 (16), 000111 (4)
sxtb{<cond>}        t: OP_SXTH      e: 01101010 (20), 1111 (16), 000111 (4)
uxth{<cond>}        t: OP_SXTH      e: 01101111 (20), 1111 (16), 000111 (4)
uxtb16{<cond>}      t: OP_SXTH      e: 01101100 (20), 1111 (16), 000111 (4)
uxtb{<cond>}        t: OP_SXTH      e: 01101110 (20), 1111 (16), 000111 (4)

usad8{<cond>}       t: OP_USAD8     e: 01111000 (20), 1111 (12), 0001 (4)
usada8{<cond>}      t: OP_USADA8    e: 01111000 (20), 0001 (4)

# -----------------------------------------------------------------------------
#   VFP instructions 
# -----------------------------------------------------------------------------

f{<vfp_dp>}s{<cond>}        t: OP_VFP_DP_S e: 1110 (24), 1010 (8), 0 (4)
f{<vfp_dp>}d{<cond>}        t: OP_VFP_DP_D e: 1110 (24), 1011 (8), 0 (4)
f{<vfp_dpx>}s{<cond>}   t: OP_VFP_DPX_S e: 11101 (23), 1010 (8), 11 (20), 1 (6)
f{<vfp_dpx>}d{<cond>}   t: OP_VFP_DPX_D e: 11101 (23), 1011 (8), 11 (20), 1 (6)
f{<vfp_dpx1>}s{<cond>} t: OP_VFP_DPX1_S e: 11101 (23), 1010 (8), 11 (20), 1 (6)
f{<vfp_dpx1>}d{<cond>} t: OP_VFP_DPX1_D e: 11101 (23), 1011 (8), 11 (20), 1 (6)
f{<vfp_dpxS>}s{<cond>} t: OP_VFP_DPX_S  e: 11101 (23), 1010 (8), 11 (20), 1 (6)
f{<vfp_dpxS>}d{<cond>} t: OP_VFP_DPX_DS e: 11101 (23), 1011 (8), 11 (20), 1 (6)
f{<vfp_dpxs>}s{<cond>} t: OP_VFP_DPX_S  e: 11101 (23), 1010 (8), 11 (20), 1 (6)
f{<vfp_dpxs>}d{<cond>} t: OP_VFP_DPX_SD e: 11101 (23), 1011 (8), 11 (20), 1 (6)
f{<vfp_dpxx>}s{<cond>} t: OP_VFP_DPX_DS e: 11101 (23), 1010 (8), 11 (20), 1 (6)
f{<vfp_dpxx>}d{<cond>} t: OP_VFP_DPX_SD e: 11101 (23), 1011 (8), 11 (20), 1 (6)

.define <vfp_dp>
mac                                 e: 0 (23), 0 (21), 0 (20), 0 (6)
nmac                                e: 0 (23), 0 (21), 0 (20), 1 (6)
msc                                 e: 0 (23), 0 (21), 1 (20), 0 (6)
nmsc                                e: 0 (23), 0 (21), 1 (20), 1 (6)
mul                                 e: 0 (23), 1 (21), 0 (20), 0 (6)
nmul                                e: 0 (23), 1 (21), 0 (20), 1 (6)
add                                 e: 0 (23), 1 (21), 1 (20), 0 (6)
sub                                 e: 0 (23), 1 (21), 1 (20), 1 (6)
div                                 e: 1 (23), 0 (21), 0 (20), 0 (6)
.enddefine

.define <vfp_dpx>
cpy                                 e: 0000 (16), 0 (7)
abs                                 e: 0000 (16), 1 (7)
neg                                 e: 0001 (16), 0 (7)
sqrt                                e: 0001 (16), 1 (7)
cmp                                 e: 0100 (16), 0 (7)
cmpe                                e: 0100 (16), 1 (7)
.enddefine

.define <vfp_dpx1>
cmpz                                e: 0101 (16), 0 (7), 0000 (0)
cmpez                               e: 0101 (16), 1 (7), 0000 (0)
.enddefine

# S for single instructions - they have funny syntax and take an argument of
# single precision as the SECOND argument.
.define <vfp_dpxS>
uito                                e: 1000 (16), 0 (7)
sito                                e: 1000 (16), 1 (7)
.enddefine

# Like <vfp_dpxS>, but the other way: they take an argument of single precision
# as the FIRST argument. So much for orthogonality!
.define <vfp_dpxs>
toui                                e: 1100 (16), 0 (7)
touiz                               e: 1100 (16), 1 (7)
tosi                                e: 1101 (16), 0 (7)
tosiz                               e: 1101 (16), 1 (7)
.enddefine

# x for eXchange instructions: they take an argument of the opposite precision
# as the FIRST argument.
.define <vfp_dpxx>
cvtd                                e: 0111 (16), 1 (7)
cvts                                e: 0111 (16), 1 (7)
.enddefine

fstm{<vfp_stam>}s{<cond>}   t: OP_VFP_STM_S e: 110 (25), 0 (20), 1010 (8)
fldm{<vfp_ldam>}s{<cond>}   t: OP_VFP_STM_S e: 110 (25), 1 (20), 1010 (8)
fstm{<vfp_stam>}d{<cond>}   t: OP_VFP_STM_D e: 110 (25), 0 (20), 1011 (8)
fldm{<vfp_ldam>}d{<cond>}   t: OP_VFP_STM_D e: 110 (25), 1 (20), 1011 (8)
fstm{<vfp_stam>}x{<cond>}   t: OP_VFP_STM_X e: 110 (25), 0 (20), 1011 (8)
fldm{<vfp_ldam>}x{<cond>}   t: OP_VFP_STM_X e: 110 (25), 1 (20), 1011 (8)

.define <vfp_stam>
ia                                          e: 0 (24), 1 (23)
db                                          e: 1 (24), 0 (23)
ea                                          e: 0 (24), 1 (23)
fd                                          e: 1 (24), 0 (23)
.enddefine

.define <vfp_ldam>
ia                                          e: 0 (24), 1 (23)
db                                          e: 1 (24), 0 (23)
fd                                          e: 0 (24), 1 (23)
ea                                          e: 1 (24), 0 (23)
.enddefine

fsts{<cond>}                t: OP_VFP_ST_S  e: 1101 (24), 00 (20), 1010 (8)
flds{<cond>}                t: OP_VFP_ST_S  e: 1101 (24), 01 (20), 1010 (8) 
fstd{<cond>}                t: OP_VFP_ST_D  e: 1101 (24), 00 (20), 1011 (8)
fldd{<cond>}                t: OP_VFP_ST_D  e: 1101 (24), 01 (20), 1011 (8) 

fmsr{<cond>}                t: OP_VFP_MSR   e: 11100000 (20), 1010 (8), 1 (4)
fmrs{<cond>}                t: OP_VFP_MRS   e: 11100001 (20), 1010 (8), 1 (4)
fmdlr{<cond>}       t: OP_VFP_MDXR  e: 11100000 (20), 1011 (8), 0 (7), 1 (4)
fmrdl{<cond>}       t: OP_VFP_MRDX  e: 11100001 (20), 1011 (8), 0 (7), 1 (4)
fmdhr{<cond>}       t: OP_VFP_MDXR  e: 11100010 (20), 1011 (8), 0 (7), 1 (4)
fmrdh{<cond>}       t: OP_VFP_MRDX  e: 11100011 (20), 1011 (8), 0 (7), 1 (4)
fmxr{<cond>}        t: OP_VFP_MXR   e: 11101110 (20), 1010 (8), 0 (7), 1 (4)
fmrx{<cond>}        t: OP_VFP_MRX   e: 11101111 (20), 1010 (8), 0 (7), 1 (4)

fmstat{<cond>}      t: OP_VFP_FMSTAT    e: 11101111000111111010 (8), 1 (4)

# -----------------------------------------------------------------------------
#   VFP2 instructions 
# -----------------------------------------------------------------------------

fmdrr{<cond>}   t: OP_VFP_FMDRR e: 11000100 (20), 1011 (8), 0001 (4)
fmrrd{<cond>}   t: OP_VFP_FMRRD e: 11000101 (20), 1011 (8), 0001 (4)
fmsrr{<cond>}   t: OP_VFP_FMSRR e: 11000100 (20), 1010 (8), 00 (6), 1 (4)
fmrrs{<cond>}   t: OP_VFP_FMRRS e: 11000101 (20), 1010 (8), 00 (6), 1 (4)

